#!/usr/bin/python
import pygame, random, sys, os, re, time, getopt
from pygame.locals import *
import babyslam
from babyslam import text, effects, shared

mode_res = None
mode_flags = pygame.FULLSCREEN
try:
    opts, args = getopt.getopt(sys.argv[1:], "dr:", ["dev", "resolution"])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)
output = None
verbose = False
for o, a in opts:
    if o == "-d":
        mode_flags = pygame.NOFRAME #todo: look up flag for frame, there's no point in not having a frame
        mode_res = (800,600) if mode_res is None else mode_res
    if o == "-r":
        #TODO: validate that arg is in \d+x\d+ pattern
        mode_res = tuple([ int(x) for x in a.split("x")])


last_hit = time.time() * 1000 # time in millis

symbols = 'abcdefghijklmnopqrstuvwxyz1234567890'

def terminate():
    pygame.quit()
    sys.exit()

def waitForPlayerToPressKey():
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE: # pressing escape quits
                    terminate()
                return

# set up pygame, the window, and the mouse cursor
pygame.init()
mainClock = pygame.time.Clock()

mode_res = pygame.display.list_modes()[0] if mode_res is None else mode_res
print mode_res
shared.WINDOWWIDTH, shared.WINDOWHEIGHT = mode_res
shared.windowSurface = pygame.display.set_mode(mode_res, mode_flags)

pygame.display.set_caption('Babyslam')
pygame.mouse.set_visible(False)

# create font cache (sizes 100 to 300)
shared.font_cache = dict( (x, pygame.font.SysFont(None, x)) for x in range(100, 301) )
sysfont = pygame.font.SysFont(None, 15)

def addObject(obj, ary):
  if len(ary) >= shared.MAXOBJECTS:
      ary[0:1] = []
  ary.append(obj)

def loadSpecials():
    result = []
    path = os.path.join(babyslam.__path__[0], 'media')
    files =  os.listdir(path)
    png_pattern = re.compile('\.png$')
    sounds = []
    for png in filter(lambda x: png_pattern.search(x), files):
        #crappy code. could be more efficient and more readable
        base = png[0:png.rindex('.')]
        sounds = filter(lambda x: x in [ base+'.'+ext for ext in ['wav','ogg']] or (x.startswith(base + '_') and (x.endswith('.ogg') or x.endswith('.wav'))), files)
        result.append(effects.Special(path+'/'+png, [ path+'/'+x for x in sounds ]))
    return result

SPECIALS = loadSpecials()
print "INFO: Found %d images in media dir"%(len(SPECIALS))

while True:
    letters = []
    escapecnt = 0
    # set up the start of the game

    while True: # the game loop runs while the game part is playing

        for event in pygame.event.get():
            if event.type == QUIT:
                terminate()

            if event.type == KEYDOWN:
                if event.key in range(256) and chr(event.key) in symbols and shared.ESCAPE_CLAUSE[escapecnt] != chr(event.key):
                    escapecnt = 0
                if event.key in range(256) and chr(event.key) in symbols and shared.ESCAPE_CLAUSE[escapecnt] == chr(event.key):
                    escapecnt += 1

                now = time.time() * 1000 # time in millis
                if (now - last_hit) > shared.RATE_LIMIT:
                    last_hit = now
                    char = chr(event.key) if event.key in range(256) and chr(event.key) in symbols else random.choice(symbols)
                    if random.random() < shared.SPECIAL_RATE:
                        addObject(effects.SpecialObj(char, random.choice(SPECIALS)), letters)
                    else:
                        addObject(effects.Letter(char), letters)

            if event.type == KEYUP:
                None

            if event.type == MOUSEMOTION:
                None

        if escapecnt == len(shared.ESCAPE_CLAUSE):
            terminate()
        # Draw the game world on the window.
        shared.windowSurface.fill(shared.BACKGROUNDCOLOR)

        text.drawText('type %s to quit'%shared.ESCAPE_CLAUSE, sysfont, shared.windowSurface, 0, 0)
        # Draw the letters
        for l in letters:
            l.update()
            l.draw()

        pygame.display.update()

        mainClock.tick(shared.FPS)

    # Stop the game
