#!/usr/bin/python
import pygame, random, sys, os, re, time, getopt
from pygame.locals import *
import babyslam
from babyslam import text, effects, shared, config, util

mode_res = None
mode_flags = pygame.FULLSCREEN
config = None
try:
    opts, args = getopt.getopt(sys.argv[1:], "dr:c:", ["dev", "resolution", "config"])
except getopt.GetoptError, err:
    # print help information and exit:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)
output = None
verbose = False
for o, a in opts:
    if o == "-d":
        mode_flags = pygame.NOFRAME #todo: look up flag for frame, there's no point in not having a frame
        mode_res = (800,600) if mode_res is None else mode_res
    if o == "-r":
        #TODO: validate that arg is in \d+x\d+ pattern
        mode_res = tuple([ int(x) for x in a.split("x")])
    if o == "-c":
        config = a
        if not os.path.exists(config):
            raise "Specified configuration file does not exist: %s"%config

def waitForPlayerToPressKey():
    while True:
        for event in pygame.event.get():
            if event.type == QUIT:
                self.terminate()
            if event.type == KEYDOWN:
                if event.key == K_ESCAPE: # pressing escape quits
                    self.terminate()
                return

# set up pygame, the window, and the mouse cursor

class Babyslam(object):
    def __init__(self, mode_res, mode_flags, config=None):
        self.escapecnt = 0

        self.mainClock = babyslam.shared.init(mode_res, mode_flags)
        self.sysfont = pygame.font.SysFont(None, 15)
        self.config = babyslam.config.XmlConfigBuilder().build_config(config)
        self.fifo = babyslam.util.Fifo(shared.MAXOBJECTS)

        self.last_hit = time.time() * 1000 # time in millis
        self.symbols = 'abcdefghijklmnopqrstuvwxyz1234567890'

    def mainloop(self):
        
        while True: # the game loop runs while the game part is playing

            for event in pygame.event.get():
                if event.type == QUIT:
                    self.terminate()
                if event.type == KEYDOWN:
                    self.handle_keydown(event)
                if event.type == KEYUP:
                    pass
                if event.type == MOUSEMOTION:
                    pass

            if self.escapecnt == len(shared.ESCAPE_CLAUSE):
                self.terminate()

            self.draw_screen()

    def terminate(self):
        pygame.quit()
        sys.exit()

    def handle_keydown(self, event):
        if event.key in range(256) and chr(event.key) in self.symbols and shared.ESCAPE_CLAUSE[self.escapecnt] != chr(event.key):
            self.escapecnt = 0
        if event.key in range(256) and chr(event.key) in self.symbols and shared.ESCAPE_CLAUSE[self.escapecnt] == chr(event.key):
            self.escapecnt += 1

        now = time.time() * 1000 # time in millis
        if (now - self.last_hit) > shared.RATE_LIMIT:
            self.last_hit = now
            
            #replace non-alphanumerics with a random alphanumeric
            char = chr(event.key) if event.key in range(256) and chr(event.key) in self.symbols else random.choice(self.symbols)

            self.fifo.append(self.config.get_random_effect(char))

    def draw_screen(self):
        # Draw the game world on the window.
        shared.windowSurface.fill(shared.BACKGROUNDCOLOR)
        text.drawText('type %s to quit'%shared.ESCAPE_CLAUSE, self.sysfont, shared.windowSurface, 0, 0)

        # Draw the effect instances:
        for effect in self.fifo:
            effect.update()
            effect.draw()

        pygame.display.update()
        self.mainClock.tick(shared.FPS)

if config == None:
    config = os.path.expanduser('~/.babyslam/config.xml')
if not os.path.exists('~/.babyslam/config.xml'):
    config = '/etc/babyslam.xml'

if __name__=='__main__':
    Babyslam(mode_res, mode_flags, config).mainloop()
